# -*- coding: utf-8 -*-
"""nitribalance .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RpvmsWeHdW4oW3MTPrx2MPdmU6WMKeck
"""

# Importar librerias
import pandas as pd
import streamlit as st
import streamlit_extras
import streamlit_authenticator as stauth
import re
from deta import Deta
from datetime import time

# Almacenamos la key de la base de datos en una constante
DETA_KEY = "e0qgr2zg4tq_mbZWcCg7iGCpWFBbCy3GGFjEYHdFmZYR"

# Creamos nuestro objeto deta para hacer la conexion a la DB
deta = Deta(DETA_KEY)

# Realizamos la conexion a la DB
db = deta.Base("NutribalanceUsers")

# Funcion para registrar usuarios en la DB
def insertar_usuario(email, username, age, height, password):
    """Agrega usuarios a la Base de Datos"""
    return db.put({"key":email, "username": username, "age":age, "height":height, "password":password})

# Funcion que retorna los usuarios registrados
def fetch_usuarios():
    """Regresa un diccionario con los usuarios registrados"""
    # guardamos los datos de la DB en users y retornamos su contenido
    users = db.fetch()
    return users.items

# Funcion que retorna los emails de los usuarios registrados
def get_emails_usuarios():
    """Regresa una lista con los emails de cada usuario"""
    # guardamos los datos de la DB en users
    users = db.fetch()
    emails = []
    # filtramos los emails de la DB
    for user in users.items:
        emails.append(user["key"])
    return emails

# Funcion que retorna los nombres de usuario de los usuarios registrados
def get_usernames_usuarios():
    """Regresa una lista con los username de cada usuario"""
    # guardamos los datos de la DB en users
    users = db.fetch()
    usernames = []
    # filtramos los usernames de la DB
    for user in users.items:
        usernames.append(user["username"])
    return usernames

# Funcion que verifica si un email ingresado es valido
def validar_email(email):
    """Retorna True si el email ingresado es valido, de lo contrario retorna False"""
    # Patrones tipicos de un email valido
    pattern = "^[a-zA-Z0_9-_]+@[a-zA-Z0_9-_]+\.[a-z]{1,3}$"
    pattern1 = "^[a-zA-Z0_9-_]+@[a-zA-Z0_9-_]+\.[a-z]{1,3}+\.[a-z]{1,3}$"

    # Verifica si el email ingresado coincide con algun patron definido
    if re.match(pattern, email) or re.match(pattern1, email):
        return True
    return False

# Funcion que verifica si un username ingresado es valido
def validar_username(username):
    """Retorna True si el username es valido, de lo contrario, retorna False"""
    # Se define el patron de un username tipico
    pattern = "^[a-zA-Z0-9]*$"
    # Se verifica si el username ingresado coincide con el patron tipico
    if re.match(pattern, username):
        return True
    return False

# Titulo en la pagina
st.title("Nutribalance")

# Manejo de posibles errores
try:
    # Se almacenan los datos necesarios de la DB
    users = fetch_usuarios()
    emails = get_emails_usuarios()
    usernames = get_usernames_usuarios()
    passwords = [user["password"] for user in users]

    # Se crea el diccionario credentials necesario para el funcionamiento del autenticador de cuentas
    credentials = {"usernames" : {}}
    for index in range(len(emails)):
        credentials["usernames"][usernames[index]] = {"name" : emails[index], "password" : passwords[index]}

    # Creacion del autenticador
    Authenticator = stauth.Authenticate(credentials, cookie_name="Streamlit", key="cookiekey", cookie_expiry_days=3)

    # Crear boton de Cerrar sesion si la sesion fue iniciada
    if st.session_state["authentication_status"]:
        Authenticator.logout("Cerrar sesion", location="sidebar")

# Informar de que hubo una excepcion en caso de que la haya
except:
    st.error("Excepcion lanzada")

# Crear pie de pagina con los datos de contacto de los creadores
footer = """
<style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        z-index: 10;
        width: 100%;
        background-color: rgb(14, 17, 23);
        color: black;
        text-align: center;
    }
    .footer p {
        color: white;
    }
</style>
<div class="footer">
    <p>App desarrollada por: <br />
    Luis Fernando López Echeverri | Andres Felipe Ramirez Suarez <br />
    Contactenos: <a href="#">lulopeze@unal.edu.co</a> | <a href="#">aramirezsu@unal.edu.co</a></p>
</div>
"""
st.markdown(footer,unsafe_allow_html=True)

# Recomendaciones
# Funcion calorias diarias
def calcular_calorias_diarias(sexo, peso, altura, edad, nivel_actividad):
    calorias_diarias = 0  # Inicializar la variable con un valor predeterminado

    if sexo == "Masculino":
        tmb = 88.362 + (13.397 * peso) + (4.799 * altura) - (5.677 * edad)
    elif sexo == "Femenino":
        tmb = 447.593 + (9.247 * peso) + (3.098 * altura) - (4.330 * edad)

    if nivel_actividad == "Sedentario":
        calorias_diarias = tmb * 1.2
    elif nivel_actividad == "Ligera actividad":
        calorias_diarias = tmb * 1.375
    elif nivel_actividad == "Moderada actividad":
        calorias_diarias = tmb * 1.55
    elif nivel_actividad == "Alta actividad":
        calorias_diarias = tmb * 1.725
    elif nivel_actividad == "Muy alta actividad":
        calorias_diarias = tmb * 1.9

    return calorias_diarias

# Funcion para mostrar recomendaciones de calorias segun los alimentos seleccionados
def mostrar_diferencia_calorias(total_calorias_consumidas, total_calorias_quemadas, calorias_diarias):
    diferencia_calorias = calorias_diarias - (total_calorias_consumidas - total_calorias_quemadas)
    if diferencia_calorias > 0:
        st.write(f"Has consumido {int(diferencia_calorias)} calorías en exceso hoy. Considera ajustar tu ingesta calórica.")
    elif diferencia_calorias < 0:
        st.write(f"Te faltan {int(abs(diferencia_calorias))} calorías para alcanzar tu ingesta calórica diaria. ¡Asegúrate de comer lo suficiente!")


# Funcion proteinas diarias
def calcular_proteinas_diarias(peso, objetivo):
    if objetivo == "Aumentar masa muscular":
        proteinas_diarias = peso * 2.2
        return proteinas_diarias
    elif objetivo == "Mantenerse en un peso":
        proteinas_diarias = peso * 1.5
        return proteinas_diarias
    elif objetivo == "Bajar de peso":
        proteinas_diarias = peso * 1.2
        return proteinas_diarias

# Funcion grasas diarias
def calcular_grasas_diarias(peso, objetivo):
    if objetivo == "Aumentar masa muscular":
        grasas_diarias = peso * 1
        return grasas_diarias
    elif objetivo == "Mantenerse en un peso":
        grasas_diarias = peso * 0.8
        return grasas_diarias
    elif objetivo == "Bajar de peso":
        grasas_diarias = peso * 0.6
        return grasas_diarias

# Funcion carbohidratos diarios
def calcular_carbohidratos_diarios(calorias_diarias, proteinas, grasas):
    carbohidratos_diarios = (calorias_diarias - (proteinas * 4 + grasas * 9)) / 4
    return carbohidratos_diarios

# Funcion para mostrar recomendaciones de carbohidratos segun los alimentos seleccionados
def mostrar_diferencia_carbohidratos(total_carbohidratos_consumidos, carbohidratos_diarios):
   diferencia_carbohidratos = carbohidratos_diarios - total_carbohidratos_consumidos
   if diferencia_carbohidratos > 0:
        st.write(f"Has consumido {int(diferencia_carbohidratos)} gramos de carbohidratos en exceso hoy. Considera ajustar tu ingesta.")
   elif diferencia_carbohidratos < 0:
        st.write(f"Te faltan {int(abs(diferencia_carbohidratos))} gramos de carbohidratos para alcanzar tu ingesta diaria. ¡Asegúrate de consumir suficientes carbohidratos!")
        st.write(f"**Te recomendamos que consumas los siguientes alimentos con más carbohidratos**")
        top_carbs = df.nlargest(5, 'Carbs')
        st.write(top_carbs)
   else:
        st.write("Estás en línea con tu ingesta diaria de carbohidratos. ¡Bien hecho!")

# Funcion para mostrar recomendaciones de grasas segun los alimentos seleccionados
def mostrar_diferencia_grasas(total_grasas_consumidas, grasas_diarias):
    diferencia_grasas = grasas_diarias - total_grasas_consumidas

    if diferencia_grasas > 0:
        st.write(f"Has consumido {int(diferencia_grasas)} gramos de grasas en exceso hoy. Considera ajustar tu ingesta.")
    elif diferencia_grasas < 0:
        st.write(f"Te faltan {int(abs(diferencia_grasas))} gramos de grasas para alcanzar tu ingesta diaria. ¡Asegúrate de consumir suficientes grasas!")
    else:
        st.write("Estás en línea con tu ingesta diaria de grasas. ¡Bien hecho!")

# Funcion para mostrar recomendaciones de proteinas segun los alimentos seleccionados
def mostrar_diferencia_proteinas(total_proteinas_consumidas, proteinas_diarias):
    diferencia_proteinas = proteinas_diarias - total_proteinas_consumidas

    if diferencia_proteinas > 0:
        st.write(f"Has consumido {int(diferencia_proteinas)} gramos de proteínas en exceso hoy. Considera ajustar tu ingesta.")
    elif diferencia_proteinas < 0:
        st.write(f"Te faltan {int(abs(diferencia_proteinas))} gramos de proteínas para alcanzar tu ingesta diaria. ¡Asegúrate de consumir suficientes proteínas!")
        st.write(f"**Te recomendamos que consumas los siguientes alimentos con más proteínas**")
        top_protein = df.nlargest(5, 'Protein')
        st.write(top_protein)
    else:
        st.write("Estás en línea con tu ingesta diaria de proteínas. ¡Bien hecho!")