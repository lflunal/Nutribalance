# -*- coding: utf-8 -*-
"""Ingresar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nHdHeaJB8xNkP2HlYZxn_RehAiHCfOM3
"""

# Pagina de inicio de sesion

# Importar librerias necesarias
import streamlit as st
import streamlit_extras
import streamlit_authenticator as stauth
import re
from deta import Deta

# Almacenamos la key de la base de datos en una constante
DETA_KEY = "e0qgr2zg4tq_mbZWcCg7iGCpWFBbCy3GGFjEYHdFmZYR"

# Creamos nuestro objeto deta para hacer la conexion a la DB
deta = Deta(DETA_KEY)

# Realizamos la conexion a la DB
db = deta.Base("NutribalanceUsers")

# Funcion para registrar usuarios en la DB
def insertar_usuario(email, username, age, height, password):
    """
    Agrega un usuario a la Base de Datos.

    Parameters:
    - email (str): Correo electrónico del usuario.
    - username (str): Nombre de usuario del usuario.
    - age (int): Edad del usuario.
    - height (float): Altura del usuario en centímetros.
    - password (str): Contraseña del usuario.

    Returns:
    - None: La función agrega el usuario a la Base de Datos,
    pero no devuelve nada.
    """
    return db.put({"key": email, "username": username, "age": age,
                   "height": height, "password": password})

# Funcion que retorna los usuarios registrados
def fetch_usuarios():
    """
    Recupera los usuarios registrados en la Base de Datos.

    Returns:
    - dict: Un diccionario que contiene los usuarios registrados,
     donde las claves son las direcciones de correo electrónico
     y los valores son los datos de los usuarios.
    """
    users = db.fetch()
    return users.items()

# Funcion que retorna los emails de los usuarios registrados
def get_emails_usuarios():
    """
    Obtiene una lista con las direcciones de correo electrónico de
    cada usuario registrado.

    Returns:
    - list: Una lista que contiene las direcciones de correo electrónico
    de cada usuario almacenado en la Base de Datos.
    """
    # Recuperamos los datos de la Base de Datos
    users = db.fetch()

    # Filtramos y extraemos las direcciones de correo electrónico de los usuarios
    emails = [user["key"] for user in users.items()]

    return emails

# Funcion que retorna los nombres de usuario de los usuarios registrados
def get_usernames_usuarios():
    """
    Obtiene una lista con los nombres de usuario de cada usuario registrado.

    Returns:
    - list: Una lista que contiene los nombres de usuario de
     cada usuario almacenado en la Base de Datos.
    """
    # Recuperamos los datos de la Base de Datos
    users = db.fetch()

    # Filtramos y extraemos los nombres de usuario de los usuarios
    usernames = [user["username"] for user in users.items()]

    return usernames

# Funcion que verifica si un email ingresado es valido
def validar_email(email):
    """
    Verifica si la cadena proporcionada es una dirección de
    correo electrónico válida.

    Parameters:
    - email (str): La cadena que se va a verificar como dirección de
    correo electrónico.

    Returns:
    - bool: True si la cadena es una dirección de correo electrónico válida,
    False en caso contrario.
    """
    # Patrones típicos de una dirección de correo electrónico válida
    pattern = "^[a-zA-Z0_9-_]+@[a-zA-Z0-9-_]+\.[a-z]{1,3}$"
    pattern1 = "^[a-zA-Z0_9-_]+@[a-zA-Z0-9-_]+\.[a-z]{1,3}+\.[a-z]{1,3}$"

    # Verifica si el email ingresado coincide con alguno de los
    # patrones definidos
    if re.match(pattern, email) or re.match(pattern1, email):
        return True
    return False

# Funcion que verifica si un username ingresado es valido
def validar_username(username):
    """
    Verifica si la cadena proporcionada es un nombre de usuario válido.

    Parameters:
    - username (str): La cadena que se va a verificar como nombre de usuario.

    Returns:
    - bool: True si la cadena es un nombre de usuario válido,
    False en caso contrario.
    """
    # Se define el patrón de un nombre de usuario típico
    pattern = "^[a-zA-Z0-9]*$"

    # Se verifica si el nombre de usuario ingresado coincide con el patrón típico
    if re.match(pattern, username):
        return True
    return False


# Manejo de posibles errores
try:
    # Se almacenan los datos necesarios de la DB
    users = fetch_usuarios()
    emails = get_emails_usuarios()
    usernames = get_usernames_usuarios()
    passwords = [user["password"] for user in users]

    # Se crea el diccionario credentials necesario para el
    # funcionamiento del autenticador de cuentas
    credentials = {"usernames" : {}}
    for index in range(len(emails)):
        credentials["usernames"][usernames[index]] = {"name" : emails[index],
                                                "password" : passwords[index]}

    # Creacion del autenticador
    Authenticator = stauth.Authenticate(credentials, cookie_name="Streamlit",
                                        key="cookiekey", cookie_expiry_days=3)

    # La funcion login regresa una tupla con estos 3 valores,
    # los cuales atrapamos
    email, authentication_status, username = Authenticator.login("Ingresar",
                                                                 "main")

    # Comprobacion de la existencia del username dentro de la DB y
    # mensajes de advertencia en caso de un mal inicio de sesion
    if username:
        if username in usernames:
            if authentication_status:
                st.write(f"Bienvenido {username}")
                Authenticator.logout("Cerrar sesion", location="sidebar")
            elif not authentication_status:
                st.warning("Contraseña o nombre de usuario incorrectos")
            else:
                st.warning("Por favor ingrese todos los campos")
        else:
            st.warning("Nombre de usuario no existe, por favor registrese")

# Informar de que hubo una excepcion en caso de que la haya
except:
    st.error("Excepcion lanzada")

# Crear pie de pagina con los datos de contacto de los creadores
footer = """
<style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: rgb(14, 17, 23);
        color: black;
        text-align: center;
    }
    .footer p {
        color: white;
    }
</style>
<div class="footer">
    <p>App desarrollada por: <br />
    Luis Fernando López Echeverri | Andres Felipe Ramirez Suarez <br />
    Contactenos: <a href="#">lulopeze@unal.edu.co</a> | <a href="#">aramirezsu@unal.edu.co</a></p>
</div>
"""
st.markdown(footer,unsafe_allow_html=True)