# -*- coding: utf-8 -*-
"""Registro_Alimentos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t2nWYYDxc12UcbpLPDiA1FnXazMF5wh1
"""

# Importar librerias
import pandas as pd
import streamlit as st
from streamlit_lottie import st_lottie
import requests
import re
import streamlit_authenticator as stauth
from deta import Deta

# Almacenamos la key de la base de datos en una constante
DETA_KEY = "e0qgr2zg4tq_mbZWcCg7iGCpWFBbCy3GGFjEYHdFmZYR"

# Creamos nuestro objeto deta para hacer la conexion a la DB
deta = Deta(DETA_KEY)

# Realizamos la conexion a la DB
db = deta.Base("NutribalanceUsers")

# Funcion que retorna los usuarios registrados
def fetch_usuarios():
    """Regresa un diccionario con los usuarios registrados"""
    # guardamos los datos de la DB en users y retornamos su contenido
    users = db.fetch()
    return users.items

# Funcion que retorna los emails de los usuarios registrados
def get_emails_usuarios():
    """Regresa una lista con los emails de cada usuario"""
    # guardamos los datos de la DB en users
    users = db.fetch()
    emails = []
    # filtramos los emails de la DB
    for user in users.items:
        emails.append(user["key"])
    return emails

# Funcion que retorna los nombres de usuario de los usuarios registrados
def get_usernames_usuarios():
    """Regresa una lista con los username de cada usuario"""
    # guardamos los datos de la DB en users
    users = db.fetch()
    usernames = []
    # filtramos los usernames de la DB
    for user in users.items:
        usernames.append(user["username"])
    return usernames

# Funcion que verifica si un email ingresado es valido
def validar_email(email):
    """Retorna True si el email ingresado es valido, de lo contrario retorna False"""
    # Patrones tipicos de un email valido
    pattern = "^[a-zA-Z0_9-_]+@[a-zA-Z0_9-_]+\.[a-z]{1,3}$"
    pattern1 = "^[a-zA-Z0_9-_]+@[a-zA-Z0_9-_]+\.[a-z]{1,3}+\.[a-z]{1,3}$"

    # Verifica si el email ingresado coincide con algun patron definido
    if re.match(pattern, email) or re.match(pattern1, email):
        return True
    return False

# Funcion que verifica si un username ingresado es valido
def validar_username(username):
    """Retorna True si el username es valido, de lo contrario, retorna False"""
    # Se define el patron de un username tipico
    pattern = "^[a-zA-Z0-9]*$"
    # Se verifica si el username ingresado coincide con el patron tipico
    if re.match(pattern, username):
        return True
    return False

def add_food(email, foods):
    user = db.get(email)

    if "food" in user:
        user["food"].extend([foods])
    else:
        user["food"] = [foods]
    
    db.put(user)

# Manejo de posibles errores
try:
    # Se almacenan los datos necesarios de la DB
    users = fetch_usuarios()
    emails = get_emails_usuarios()
    usernames = get_usernames_usuarios()
    passwords = [user["password"] for user in users]

    # Se crea el diccionario credentials necesario para el funcionamiento del autenticador de cuentas
    credentials = {"usernames" : {}}
    for index in range(len(emails)):
        credentials["usernames"][usernames[index]] = {"name" : emails[index], "password" : passwords[index]}

    # Creacion del autenticador
    Authenticator = stauth.Authenticate(credentials, cookie_name="Streamlit", key="cookiekey", cookie_expiry_days=3)

    # Crear boton de Cerrar sesion si la sesion fue iniciada
    if st.session_state["authentication_status"]:
        email, authentication_status, username = Authenticator.login("Ingresar", "main")
        Authenticator.logout("Cerrar sesion", location="sidebar")

# Informar de que hubo una excepcion en caso de que la haya
except:
    st.error("Excepcion lanzada")

# Crear pie de pagina con los datos de contacto de los creadores
footer = """
<style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        z-index: 10;
        width: 100%;
        background-color: rgb(14, 17, 23);
        color: black;
        text-align: center;
    }
    .footer p {
        color: white;
    }
</style>
<div class="footer">
    <p>App desarrollada por: <br />
    Luis Fernando López Echeverri | Andres Felipe Ramirez Suarez <br />
    Contactenos: <a href="#">lulopeze@unal.edu.co</a> | <a href="#">aramirezsu@unal.edu.co</a></p>
</div>
"""
st.markdown(footer,unsafe_allow_html=True)


# Lectura de datos
url_foods = (
  "https://docs.google.com/spreadsheets/d/e/2PACX-1vRHczI8B0Qbww2boToqMi"
  "G-wi7T3N5fq9QcEFqryMGuWi0yFT7ty1vZTXgeAgf4S9HyDqy8APfmdWtQ/pub?output=csv"
  )


# Cargar el DataFrame desde la URL
df_foods_base = pd.read_csv(url_foods)

# Eliminar comas y convertir a enteros en el DataFrame food
columns_to_clean = ["Calories", "Grams", "Protein", "Fat","Sat.Fat",
                    "Fiber", "Carbs"]

for column in columns_to_clean:
    df_foods_base[column] = df_foods_base[column].str.replace(',', '', regex=True)
    df_foods_base[column] = df_foods_base[column].str.replace('t', '0', regex=True)
    df_foods_base[column] = df_foods_base[column].str.replace('a', '0', regex=True)
    df_foods_base[column] = df_foods_base[column].str.replace("'", '', regex=True)
    df_foods_base[column] = df_foods_base[column].str.strip()
    df_foods_base[column] = df_foods_base[column].str.replace(',', '.', regex=True)
    df_foods_base[column] = df_foods_base[column].replace('', '0')
    df_foods_base[column] = df_foods_base[column].astype(float).fillna(0).astype(int)


# Configuración de la aplicación Streamlit
st.title("Registro de Alimentos Consumidos en el Día")

# Seleccionar posibles alergias o disgustos de algun alimento
alergias_seleccionadas = st.multiselect(
    "Selecciona los alimentos que no desea incluir:",
    df_foods_base["Food"]
)

# Inicializa una variable para realizar el seguimiento del total de calorías
total_calorias_consumidas = 0
total_carbohidratos_consumidas = 0
total_proteinas_consumidas = 0
total_grasa_saturada_consumidas = 0
total_fibra_consumida_consumidas = 0

# Guardamos inicialmente todos los alimentos en df_foods
df_foods = df_foods_base

# Ocultar del dataframe los elementos seleccionados
for alergia in alergias_seleccionadas:
    df_foods = df_foods[df_foods["Food"] != alergia]

st.write("### Lista de Alimentos:")
st.write(df_foods)

# Variable para la selecion de varias comidas
alimentos_seleccionados = st.multiselect(
    "Selecciona los alimentos que has consumido:",
    df_foods["Food"]
)

# Obtener los detalles de los alimentos seleccionados
for alimento_seleccionado in alimentos_seleccionados:
    detalles_alimento = df_foods[df_foods["Food"] == alimento_seleccionado]
    if not detalles_alimento.empty:
        st.write(f"### Detalles del Alimento Seleccionado ({alimento_seleccionado}):")
        calorias_alimento = detalles_alimento["Calories"].values[0]
        total_calorias_consumidas += calorias_alimento
        carbohidratos_alimento = detalles_alimento["Carbs"].values[0]
        total_carbohidratos_consumidas += carbohidratos_alimento
        proteina_alimento = detalles_alimento["Protein"].values[0]
        total_proteinas_consumidas += proteina_alimento
        grasas_saturadas_alimento = detalles_alimento["Sat.Fat"].values[0]
        total_grasa_saturada_consumidas += grasas_saturadas_alimento
        fibra_alimento = detalles_alimento["Fiber"].values[0]
        total_fibra_consumida_consumidas += fibra_alimento
        st.write(detalles_alimento)

    else:
        st.write(f"Selecciona un alimento de la lista o verifica la ortografía.")

# Mostrar el total de valorico consumido (calorias, carb, grasas...)
st.write(f"Total de calorías consumidas: {total_calorias_consumidas} calorías")
st.write(f"Total de carbohidratos consumidos: {total_carbohidratos_consumidas} ")
st.write(f"Total de grasas saturadas consumida: {total_grasa_saturada_consumidas} ")
st.write(f"Total de fibra consumida: {total_fibra_consumida_consumidas} ")
st.write(f"Total de proteina consumida: {total_proteinas_consumidas} ")

boton_almacenar = st.button("Almacenar calorias")

if boton_almacenar:
    if st.session_state["authentication_status"]:
        add_food(email, ["fecha", int(total_calorias_consumidas)])
        st.success("Datos almacenados")
    else:
        st.warning("Para almacenar los datos primero debe iniciar sesion o registrarse")

# Funcion para cargar las animaciones
def load_lottieurl(url):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# URL de animacion #1
lottie_peso = load_lottieurl("https://raw.githubusercontent.com/lflunal/"
"ppi_20/main/animaciones/peso.json")

# Mostrar animacion #1
st_lottie(lottie_peso, height = 180, key="peso")